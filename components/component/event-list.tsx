/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/FNM0gMDQ9Od
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { IBM_Plex_Sans } from 'next/font/google'
import { Libre_Franklin } from 'next/font/google'

ibm_plex_sans({
  subsets: ['latin'],
  display: 'swap',
})

libre_franklin({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card"
import Link from "next/link"
import { HTMLProps, SVGProps } from "react"
import { CartesianGrid, XAxis, Bar, BarChart, Line, LineChart } from "recharts"
// import { ChartTooltipContent, ChartTooltip, ChartContainer } from "@/components/ui/chart"

interface SkintEvent {
  title: string
  description: string
  start_date: string
  start_time: string
  end_date: string
  end_time: string
  link: string
  address: string
  cost: string
}

export function EventList({ events }: { events: SkintEvent[] }) {
  return (
    <div className="max-w-7xl mx-auto p-6 sm:p-8 md:p-10 grid grid-cols-1 lg:grid-cols-2 gap-8">
      <div>
        <header className="mb-8">
          <h1 className="text-3xl font-bold">Upcoming Local Weekend Events</h1>
          <p className="text-muted-foreground">Check out these exciting events happening in your area this weekend.</p>
        </header>
        <div className="grid gap-8">
          {events.map(e => (
            <Card key={e.title}>
              <div>
                <h3 className="text-xl font-semibold mb-2">{e.title}</h3>
                <div className="pb-2">
                  <p>{e.description}</p>
                </div>
                <div className="flex flex-row items-center gap-2 text-muted-foreground">
                  <CalendarIcon className="w-4 h-4" />
                  <span>{e.start_date} {e.start_time}</span>
                  &mdash;
                  <span>{e.end_date} {e.end_time}</span>
                </div>
                <div className="flex gap-2 text-muted-foreground">
                  <MapPinIcon className="w-4 h-4 my-1" />
                  <span>{e.address ?? "Unknown"}</span>
                </div>
              </div>
              <div className="flex flex-row justify-between items-end gap-2 w-full">
                <div>{e.link && <Link href={e.link}>more info &rarr;</Link>}</div>
                <div className="bg-muted px-3 py-1 rounded-md text-sm font-medium">{e.cost ?? '--'}</div>
              </div>
            </Card>
          ))}
        </div>
      </div>
      <div className="lg:sticky lg:top-0 lg:h-screen">
        <div className="rounded-lg" />
      </div>
    </div>
  )
}

// function BarchartChart(props) {
//   return (
//     <div {...props}>
//       <ChartContainer
//         config={{
//           desktop: {
//             label: "Desktop",
//             color: "hsl(var(--chart-1))",
//           },
//         }}
//         className="min-h-[300px]"
//       >
//         <BarChart
//           accessibilityLayer
//           data={[
//             { month: "January", desktop: 186 },
//             { month: "February", desktop: 305 },
//             { month: "March", desktop: 237 },
//             { month: "April", desktop: 73 },
//             { month: "May", desktop: 209 },
//             { month: "June", desktop: 214 },
//           ]}
//         >
//           <CartesianGrid vertical={false} />
//           <XAxis
//             dataKey="month"
//             tickLine={false}
//             tickMargin={10}
//             axisLine={false}
//             tickFormatter={(value) => value.slice(0, 3)}
//           />
//           <ChartTooltip cursor={false} content={<ChartTooltipContent hideLabel />} />
//           <Bar dataKey="desktop" fill="var(--color-desktop)" radius={8} />
//         </BarChart>
//       </ChartContainer>
//     </div>
//   )
// }


function CalendarIcon(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M8 2v4" />
      <path d="M16 2v4" />
      <rect width="18" height="18" x="3" y="4" rx="2" />
      <path d="M3 10h18" />
    </svg>
  )
}


// function LinechartChart(props) {
//   return (
//     <div {...props}>
//       <ChartContainer
//         config={{
//           desktop: {
//             label: "Desktop",
//             color: "hsl(var(--chart-1))",
//           },
//         }}
//       >
//         <LineChart
//           accessibilityLayer
//           data={[
//             { month: "January", desktop: 186 },
//             { month: "February", desktop: 305 },
//             { month: "March", desktop: 237 },
//             { month: "April", desktop: 73 },
//             { month: "May", desktop: 209 },
//             { month: "June", desktop: 214 },
//           ]}
//           margin={{
//             left: 12,
//             right: 12,
//           }}
//         >
//           <CartesianGrid vertical={false} />
//           <XAxis
//             dataKey="month"
//             tickLine={false}
//             axisLine={false}
//             tickMargin={8}
//             tickFormatter={(value) => value.slice(0, 3)}
//           />
//           <ChartTooltip cursor={false} content={<ChartTooltipContent hideLabel />} />
//           <Line dataKey="desktop" type="natural" stroke="var(--color-desktop)" strokeWidth={2} dot={false} />
//         </LineChart>
//       </ChartContainer>
//     </div>
//   )
// }


function MapPinIcon(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0Z" />
      <circle cx="12" cy="10" r="3" />
    </svg>
  )
}


function XIcon(props: SVGProps<SVGSVGElement>) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M18 6 6 18" />
      <path d="m6 6 12 12" />
    </svg>
  )
}
